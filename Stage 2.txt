//Stage 2: arithmetic operations on X,Y
// module tt(a,b);
// input [64:0]a,b;
// always @(*)begin

// end
// endmodule

// module arithmetic(k_1,x1,x2,y1,y2,M_outX,M_outY,A_outX,A_outY);
// input [15:0]x1,x2,y1,y2;
// input k_1;
// output reg [31:0]M_outX;// the multiplier's output of x-axis
// output reg [31:0]A_outX;// the adder's output of x-axis

// output reg [31:0]M_outY;// the multiplier's output of y-axis
// output reg [31:0]A_outY;// the adder's output of y-axis



// endmodule


//execute1:
module Execute1(OP1,OP2,k_1,clk,s1,s2,A_R,M_R);
input [31:0]OP1,OP2;
input [15:0]k_1;
input s1;
input [1:0]s2;// will recieve a dummy value to test

input clk;
output reg [15:0]x1,y1,x2,y2; 
output reg [31:0]M_outX;// the multiplier's output of x-axis
output reg [31:0]A_outX;// the adder's output of x-axis

 reg [31:0]M_outY;// the multiplier's output of y-axis
 reg [31:0]A_outY;// the adder's output of y-axis

output  [63:0] A_R;
output  [63:0] M_R;

always@(posedge clk)
    begin

x1<=OP1[15:0];
y1<=OP1[31:16];
x2<=OP2[15:0];
y2<=OP2[31:15];

case (s1)
1'b0:
 //delay for each case because the following instrictions depend on the initialization of x and y
begin #1

      A_outX <= k_1 + x1;
      A_outY <= k_1 + y1;

      M_outX <= k_1*x1;
      M_outY <= k_1*y1;
end
1'b1:
begin #1
      A_outX <= x1 + x2;
      A_outY <= y1 + y2;
      
      M_outX <= x1*x2;
      M_outY <= y1*y2;
end
endcase
    end

wiring o(A_R,M_R,A_outX,A_outY,M_outX,M_outY);

//will send results to stage 3
    

endmodule

module wiring(out1,out2,in1x,in1y,in2x,in2y);
input [31:0]in1x,in2x,in1y,in2y;
output  [63:0]out1,out2;
 assign out1[31:0] = in1x,
      out1[63:32]=in1y,
      out2[31:0]=in2x,
      out2[63:32]=in2y;


endmodule

module TestStage2;
reg [31:0]rs1,rs2;
wire [63:0]rd;
reg [15:0]k;
reg clk = 0;
reg s1;
reg [1:0]s2;
wire [63:0]Add,mul;
always #2 clk=~clk;//a cycle equals 4 time units
Execute1 m(rs1,rs2,k,clk,s1,s2,Add,mul);
initial begin
rs1=32'b00000000000001110000000000000011;//x1=3,y1=7
rs2=32'b00000000000000010000000000000000;
k=5;
s1=0;
#4$display("point1 (x,y) = %d,%d",rs1[15:0],rs1[31:16]);
$display("selection line(s1) = %d (a point with a scaler)",s1,"\nscaler(K)= ",k,"\naddition result --> (x,y)= %d,%d",Add[31:0],Add[63:32]);
$display("multiplication result --> (x,y)= %d,%d",mul[31:0],mul[63:32]);
rs1=32'b00000000000001110000000000001011;//x1=11,y1=7
rs2=32'b00000000000100010000000000001010;//x1=10,y1=17
k=5;
s1=1;
#4$display("\n\nselection line(s1) = %d (a point with a point)",s1,"\npoint1 (x,y) = %d,%d",rs1[15:0],rs1[31:16]);
$display("point2 (x,y) = %d,%d",rs2[15:0],rs2[31:16]);

$display("addition result --> (x,y)= %d,%d",Add[31:0],Add[63:32]);
$display("multiplication result --> (x,y)= %d,%d",mul[31:0],mul[63:32]);

$finish;
end
endmodule
