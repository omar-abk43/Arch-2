//Stage 1:
module wiring1(A,B,C,D);
input [31:0]A,B;
output [31:0]C,D;
assign C = A, D=B;
endmodule
module RegFile_RD(addr1,addr2,memread,RD_1,RD_2,clk,s1,s2,k);
//note: k,s1, and s2 signals will have random values just for testing
 input [2:0]k;// scaler constant, to be used in stage 2
input s1;//the selection line of the 2-1 mux in stage 2
input [1:0]s2;//selection line of the 4-1 mux in stage 3
input clk;
input wire[8:0] addr2,addr1;
input wire[31:0]writedata;
input wire memwrite,memread;
output reg [31:0] RD_1,RD_2;
reg [31:0] ROM[0:512];
integer i;
initial begin 
for(i=0;i<512;i=i+1)
ROM[i]=i*i;
end
  always@(posedge clk) 
begin
if(memread==1'b1) begin
//Assigning the values of the registers according to the address recieved:
RD_2<=ROM[addr2];
RD_1<=ROM[addr1];
end 
end
wire [31:0]w1,w2;
wiring1 w(RD_1,RD_2,w1,w2);
//Stage 2 module will be called
endmodule

//stage 2
//execute1:
module Execute1(addr,OP1,OP2,k_1,clk,s1,s2,A_R,M_R);
input [8:0]addr;// the data will be written on this address during the write back stage
input [31:0]OP1,OP2;
input [2:0]k_1;
input s1;
input [1:0]s2;// will recieve a dummy value to test

input clk;
 reg [15:0]x1,y1,x2,y2; 
 reg [31:0]M_outX;// the multiplier's output of x-axis
 reg [31:0]A_outX;// the adder's output of x-axis
 reg [31:0]M_outY;// the multiplier's output of y-axis
 reg [31:0]A_outY;// the adder's output of y-axis
output  [63:0] A_R;
output  [63:0] M_R;
always@(posedge clk)
    begin
x1<=OP1[15:0];
y1<=OP1[31:16];
x2<=OP2[15:0];
y2<=OP2[31:15];

case (s1)
1'b0:
 //delay for each case because the following instrictions depend on the initialization of x and y
begin #1
// Point addition
      A_outX <= k_1 + x1;
      A_outY <= k_1 + y1;
//Point multiplication
      M_outX <= k_1*x1;
      M_outY <= k_1*y1;
end
1'b1:
begin #1
// Point addition
      A_outX <= x1 + x2;
      A_outY <= y1 + y2;
//Point multiplication
      M_outX <= x1*x2;
      M_outY <= y1*y2;
end
endcase
    end
wiring o(A_R,M_R,A_outX,A_outY,M_outX,M_outY);
//will send results to stage 3
endmodule
module wiring(out1,out2,in1x,in1y,in2x,in2y);// this module is for assigning the registers in EX1 to wires
input [31:0]in1x,in2x,in1y,in2y;
output  [63:0]out1,out2;
 assign out1[31:0] = in1x,
      out1[63:32]=in1y,
      out2[31:0]=in2x,
      out2[63:32]=in2y;
endmodule
//stage 3
module EX2(addr,A_R,M_R,s2,clk,out);
input [8:0]addr;
input [63:0]A_R,M_R;//inputs passed from arithmetic results in stage2
input clk;//system clock
input [1:0]s2;
 output reg [127:0]out;
always @(posedge clk)
begin 
case (s2)//mux implementation
0:out <= A_R;
1:out <= M_R*M_R;
2:out<= M_R;
endcase
end
wire [127:0]outWire;
assign outWire=out;
wire [127:0]read;
endmodule

//Stage 4: write back
module RegFile_WR(addr,writedata,memwrite,readdata,clk);
input [8:0] addr;//address to write on
input clk;//system clock
input [127:0]writedata;//written data
input  memwrite;
output reg [127:0] readdata;
reg [127:0] RAM[511:0];
always @(negedge clk) begin
if(memwrite==1'b1)
RAM[addr]<= writedata;
else  readdata=RAM[addr];
end 
endmodule
module Pipelined_Hardware(addr1,addr2,memread,clk,s1,s2,k,read);
input [8:0]addr1,addr2;
input memread,s1,clk;
wire [31:0]RD1,RD2;
input [1:0]s2;
output [127:0]read;
input [2:0]k;
wire [63:0]A_R,M_R;
wire [127:0]out;
RegFile_RD stage1(addr1,addr2,memread,RD1,RD2,clk,s1,s2,k);
Execute1 stage2(addr1,RD1,RD2,k,clk,s1,s2,A_R,M_R);
EX2 stage3(addr1,A_R,M_R,s2,clk,out);
RegFile_WR stage4(addr1,out,1'b1,read,clk);
RegFile_WR stage4R(addr1,out,1'b0,read,clk);
initial
begin
#4$display("1.stage1 outputs: RD1 =  ",RD1,"   RD2 = ",RD2);
#4$display("2.stage1 outputs: RD1 =  ",RD1,"   RD2 = ",RD2);
#4$display("3.stage1 outputs: RD1 =  ",RD1,"   RD2 = ",RD2);
#4$display("4.stage1 outputs: RD1 =  ",RD1,"   RD2 = ",RD2);
#4$display("5.stage1 outputs: RD1 =  ",RD1,"   RD2 = ",RD2);
#4$display("6.stage1 outputs: RD1 =  ",RD1,"   RD2 = ",RD2);
#4$display("7.stage1 outputs: RD1 =  ",RD1,"   RD2 = ",RD2);
end
initial
begin
#8$display("1.stage2 outputs: point addition = %d,%d ",A_R[31:0],A_R[63:32],"   point multiplication = %D,%D",M_R[31:0],M_R[63:32]);
#4$display("2.stage2 outputs: point addition = %d,%d ",A_R[31:0],A_R[63:32],"   point multiplication = %D,%D",M_R[31:0],M_R[63:32]);
#4$display("3.stage2 outputs: point addition = %d,%d ",A_R[31:0],A_R[63:32],"   point multiplication = %D,%D",M_R[31:0],M_R[63:32]);
#4$display("4.stage2 outputs: point addition = %d,%d ",A_R[31:0],A_R[63:32],"   point multiplication = %D,%D",M_R[31:0],M_R[63:32]);
#4$display("5.stage2 outputs: point addition = %d,%d ",A_R[31:0],A_R[63:32],"   point multiplication = %D,%D",M_R[31:0],M_R[63:32]);
#4$display("6.stage2 outputs: point addition = %d,%d ",A_R[31:0],A_R[63:32],"   point multiplication = %D,%D",M_R[31:0],M_R[63:32]);
#4$display("7.stage2 outputs: point addition = %d,%d ",A_R[31:0],A_R[63:32],"   point multiplication = %D,%D",M_R[31:0],M_R[63:32]);
end
initial
begin
#12$display("1.stage3 outputs: output register =  ",out);
#4$display("2.stage3 outputs: output register   =  ",out);
#4$display("3.stage3 outputs: output register  =  ",out);
#4$display("4.stage3 outputs: output register   =  ",out);
#4$display("5.stage3 outputs: output register =  ",out);
#4$display("6.stage3 outputs: output registert   =  ",out);
#4$display("7.stage3 outputs: output register  =  ",out);

end
endmodule
module TEST;
reg [8:0]addr1,addr2;
reg memread,s1;
wire [31:0]RD1,RD2;
reg clk=0;
reg [1:0]s2;
reg [2:0]k = 5;
wire [127:0]read;
always #2 clk=~clk;
 Pipelined_Hardware h(addr1,addr2,memread,clk,s1,s2,k,read);

initial begin
//instruction 1
addr1=20;
addr2=10;
memread=1;
s1=0;
s2=1;
//#17$display("written data is: ",read);
#4
//instruction 2
addr1=30;
addr2=20;
memread=1;
s1=0;
s2=1;
#4
//instruction 3
addr1=40;
addr2=50;
s1=1;
s2=1;
#4
//instruction 4
addr1=100;
addr2=200;
s1=0;
s2=2;
#4
//instruction 5
addr1=500;
addr2=520;
s1=1;
s2=2;
#4
//instruction 6
addr1=456;
addr2=377;
s1=1;
s2=0;
#4
//instruction 7
addr1=324;
addr2=173;
s1=0;
s2=0;


#1000
$finish;
end

endmodule
